scalar DateTime

type PropertyType {
	id: ID!
	range: String!
	minCardinality: Int
	maxCardinality: Int
	literal: Boolean
	mandatory: Boolean
	multiple: Boolean
}

type ElementMetaType {
	id: ID!
	propertyType(id: ID!): PropertyType
	propertyTypes: [PropertyType]
}

interface ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
}

type ProjectType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	namespace: String
	description: String
	startDate: DateTime
	endDate: DateTime
	state: String
	dateLaMu: DateTime
	userLaMu: String
	language: String
	category: String
	helpInfo: String
	code: String
	complexElements: [ComplexElementType]
}

type PersonType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	description: String
	startDate: DateTime
	endDate: DateTime
	state: String
	dateLaMu: DateTime
	userLaMu: String
	language: String
	category: String
	helpInfo: String
	code: String
	complexElements: [ComplexElementType]
}

type OrganisationType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	description: String
	startDate: DateTime
	endDate: DateTime
	state: String
	dateLaMu: DateTime
	userLaMu: String
	language: String
	category: String
	helpInfo: String
	code: String
	complexElements: [ComplexElementType]
}

type AppendixType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	description: String
	startDate: DateTime
	endDate: DateTime
	state: String
	dateLaMu: DateTime
	userLaMu: String
	language: String
	category: String
	helpInfo: String
	code: String
	complexElements: [ComplexElementType]
	invMessages: [MessageType]
	invMessageInTransactions: [MessageInTransactionType]
	invTransactions: [TransactionType]
}

type UserDefinedType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	description: String
	dateLaMu: DateTime
	userLaMu: String
	baseType: String
	xsdRestriction: String
	language: String
	helpInfo: String
	invSimpleElements: [SimpleElementType]
}

type SimpleElementType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	description: String
	interfaceType: String
	state: String
	dateLaMu: DateTime
	userLaMu: String
	language: String
	category: String
	helpInfo: String
	valueList: String
	userDefinedType: UserDefinedType
	invElementConditions: [ElementCondition]
	invSimpleElements: [ComplexElementType]
}

type ComplexElementType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	description: String
	startDate: DateTime
	endDate: DateTime
	state: String
	dateLaMu: DateTime
	userLaMu: String
	language: String
	category: String
	helpInfo: String
	complexElements: [ComplexElementType]
	simpleElements: [SimpleElementType]
	minOccurs: Int
	maxOccurs: Int
	invElementConditions: [ElementCondition]
	invComplexElements: [ComplexElementType]
	invMessages: [MessageType]
	invOrganisations: [OrganisationType]
	invPersons: [PersonType]
	invProjects: [ProjectType]
}

type MessageInTransactionType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	requiredNotify: Int
	dateLaMu: DateTime
	userLaMu: String
	received: Boolean
	send: Boolean
	state: String
	initiatorToExecutor: Boolean
	openSecondaryTransactionsAllowed: Boolean
	firstMessage: Boolean
	message: MessageType
	previous: [MessageInTransactionType]
	transaction: TransactionType
	transactionPhase: TransactionPhaseType
	group: GroupType
	appendixTypes: [AppendixType]
	conditions: [MessageInTransactionTypeCondition]
	invElementConditions: [ElementCondition]
	invPrevious: [MessageInTransactionType]
	invSendAfter: [MessageInTransactionTypeCondition]
	invSendBefore: [MessageInTransactionTypeCondition]
}

type GroupType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	description: String
	startDate: DateTime
	endDate: DateTime
	state: String
	dateLaMu: DateTime
	userLaMu: String
	language: String
	category: String
	helpInfo: String
	invGroups: [MessageInTransactionType]
}

type TransactionPhaseType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	description: String
	startDate: DateTime
	endDate: DateTime
	state: String
	dateLaMu: DateTime
	userLaMu: String
	language: String
	category: String
	helpInfo: String
	code: String
	invTransactionPhases: [MessageInTransactionType]
}

type MessageInTransactionTypeCondition implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	sendAfter: [MessageInTransactionType]
	sendBefore: [MessageInTransactionType]
	state: String
	dateLaMu: DateTime
	userLaMu: String
	helpInfo: String
	invConditions: [MessageInTransactionType]
}

type MessageType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	description: String
	startDate: DateTime
	endDate: DateTime
	state: String
	dateLaMu: DateTime
	userLaMu: String
	language: String
	category: String
	helpInfo: String
	code: String
	appendixMandatory: Boolean
	complexElements: [ComplexElementType]
	appendixTypes: [AppendixType]
	invMessages: [MessageInTransactionType]
}

type ElementCondition implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	description: String
	condition: String
	helpInfo: String
	complexElements: [ComplexElementType]
	simpleElement: SimpleElementType
	messageInTransaction: MessageInTransactionType
	parentComplexElement: ComplexElementType
	childComplexElement: ComplexElementType
	priority: Int
}

type RoleType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	description: String
	startDate: DateTime
	endDate: DateTime
	state: String
	dateLaMu: DateTime
	userLaMu: String
	language: String
	category: String
	helpInfo: String
	code: String
	responsibilityScope: String
	responsibilityTask: String
	responsibilitySupportTask: String
	responsibilityFeedback: String
	invExecutors: [TransactionType]
	invInitiators: [TransactionType]
}

type TransactionType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	description: String
	startDate: DateTime
	endDate: DateTime
	state: String
	dateLaMu: DateTime
	userLaMu: String
	language: String
	category: String
	helpInfo: String
	code: String
	result: String
	subTransactions: [TransactionType]
	initiator: RoleType
	executor: RoleType
	appendixTypes: [AppendixType]
	invSubTransactions: [TransactionType]
	invTransactions: [MessageInTransactionType]
}

type Framework {
	file: String!
	elementTypes(metaType: String): [ElementType]
	appendixType(id: ID!): AppendixType
	appendixTypes: [AppendixType]
	complexElementType(id: ID!): ComplexElementType
	complexElementTypes: [ComplexElementType]
	elementCondition(id: ID!): ElementCondition
	elementConditions(mitt: ID, ce1: ID, ce2: ID, se: ID): [ElementCondition]
	allElementConditions(mitt: ID!, ce1: ID!, ce2: ID, se: ID!): [ElementCondition]
	groupType(id: ID!): GroupType
	groupTypes: [GroupType]
	messageInTransactionType(id: ID!): MessageInTransactionType
	messageInTransactionTypes: [MessageInTransactionType]
	messageInTransactionTypeCondition(id: ID!): MessageInTransactionTypeCondition
	messageInTransactionTypeConditions: [MessageInTransactionTypeCondition]
	messageType(id: ID!): MessageType
	messageTypes: [MessageType]
	organisationType(id: ID!): OrganisationType
	organisationTypes: [OrganisationType]
	personType(id: ID!): PersonType
	personTypes: [PersonType]
	projectType(id: ID!): ProjectType
	projectTypes: [ProjectType]
	roleType(id: ID!): RoleType
	roleTypes: [RoleType]
	simpleElementType(id: ID!): SimpleElementType
	simpleElementTypes: [SimpleElementType]
	transactionPhaseType(id: ID!): TransactionPhaseType
	transactionPhaseTypes: [TransactionPhaseType]
	transactionType(id: ID!): TransactionType
	transactionTypes: [TransactionType]
	userDefinedType(id: ID!): UserDefinedType
	userDefinedTypes: [UserDefinedType]
}

type Query {
	frameworkFiles: [String]
	loadFrameworkFile(file: String!): Framework
	elementMetaTypes: [ElementMetaType]
}

input RoleTypeInput {
	id: ID!
	description: String
	startDate: DateTime
	endDate: DateTime
	state: String
	dateLaMu: DateTime
	userLaMu: String
	language: String
	category: String
	helpInfo: String
	code: String
	responsibilityScope: String
	responsibilityTask: String
	responsibilitySupportTask: String
	responsibilityFeedback: String
}

type Mutation {
	createFramework(file: String!): Framework!
	createElementType(type: String!, id: String!, file: String): ElementType!
	saveFramework(file: String!): Framework!
	updateRoleType(input: RoleTypeInput): RoleType! 
}

schema {
  query: Query
  mutation: Mutation
}
