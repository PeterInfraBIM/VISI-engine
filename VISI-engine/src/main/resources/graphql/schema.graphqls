type PropertyType {
	id: ID!
	range: String!
	minCardinality: Int
	maxCardinality: Int
	literal: Boolean
	mandatory: Boolean
	multiple: Boolean
}

type ElementMetaType {
	id: ID!
	propertyType(id: ID!): PropertyType
	propertyTypes: [PropertyType]
}

interface ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
}

type RoleType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	transactions: [TransactionType]
}

type TransactionType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	initiator: RoleType
	executor: RoleType
}

type Framework {
	file: String!
	elementTypes(metaType: String): [ElementType]
	roleTypes: [RoleType]
	transactionTypes: [TransactionType]
}

type Query {
	frameworkFiles: [String]
	loadFrameworkFile(file: String!): Framework
	elementMetaTypes: [ElementMetaType]
}

schema {
  query: Query
}
