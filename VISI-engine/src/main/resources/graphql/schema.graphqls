scalar DateTime

type PropertyType {
	id: ID!
	range: String!
	minCardinality: Int
	maxCardinality: Int
	literal: Boolean
	mandatory: Boolean
	multiple: Boolean
}

type ElementMetaType {
	id: ID!
	propertyType(id: ID!): PropertyType
	propertyTypes: [PropertyType]
}

interface ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
}

type ProjectType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	namespace: String
	description: String
	startDate: DateTime
	endDate: DateTime
	state: String
	dateLaMu: DateTime
	userLaMu: String
	language: String
	category: String
	helpInfo: String
	code: String
	complexElements: [ComplexElementType]
}

type PersonType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	description: String
	startDate: DateTime
	endDate: DateTime
	state: String
	dateLaMu: DateTime
	userLaMu: String
	language: String
	category: String
	helpInfo: String
	code: String
	complexElements: [ComplexElementType]
}

type OrganisationType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	description: String
	startDate: DateTime
	endDate: DateTime
	state: String
	dateLaMu: DateTime
	userLaMu: String
	language: String
	category: String
	helpInfo: String
	code: String
	complexElements: [ComplexElementType]
}

type AppendixType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	description: String
	startDate: DateTime
	endDate: DateTime
	state: String
	dateLaMu: DateTime
	userLaMu: String
	language: String
	category: String
	helpInfo: String
	code: String
	complexElements: [ComplexElementType]
}

type SimpleElementType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	description: String
	interfaceType: String
	state: String
	dateLaMu: DateTime
	userLaMu: String
	language: String
	category: String
	helpInfo: String
	valueList: String
}

type ComplexElementType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	description: String
	startDate: DateTime
	endDate: DateTime
	state: String
	dateLaMu: DateTime
	userLaMu: String
	language: String
	category: String
	helpInfo: String
	complexElements: [ComplexElementType]
	simpleElements: [SimpleElementType]
	minOccurs: Int
	maxOccurs: Int
}

type MessageInTransactionType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	requiredNotify: Int
	dateLaMu: DateTime
	userLaMu: String
	received: Boolean
	send: Boolean
	state: String
	initiatorToExecutor: Boolean
	openSecondaryTransactionsAllowed: Boolean
	firstMessage: Boolean
	message: MessageType
	previous: [MessageInTransactionType]
	transaction: TransactionType
	transactionPhase: TransactionPhaseType
	group: GroupType
	appendixTypes: [AppendixType]
	conditions: [MessageInTransactionTypeCondition]
	next: [MessageInTransactionType]
}

type GroupType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	description: String
	startDate: DateTime
	endDate: DateTime
	state: String
	dateLaMu: DateTime
	userLaMu: String
	language: String
	category: String
	helpInfo: String
}

type TransactionPhaseType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	description: String
	startDate: DateTime
	endDate: DateTime
	state: String
	dateLaMu: DateTime
	userLaMu: String
	language: String
	category: String
	helpInfo: String
	code: String
}

type MessageInTransactionTypeCondition implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	sendAfter: [MessageInTransactionType]
	sendBefore: [MessageInTransactionType]
	state: String
	dateLaMu: DateTime
	userLaMu: String
	helpInfo: String
}

type MessageType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	description: String
	startDate: DateTime
	endDate: DateTime
	state: String
	dateLaMu: DateTime
	userLaMu: String
	language: String
	category: String
	helpInfo: String
	code: String
	appendixMandatory: Boolean
	complexElements: [ComplexElementType]
	appendixTypes: [AppendixType]
}

type RoleType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	description: String
	startDate: DateTime
	endDate: DateTime
	state: String
	dateLaMu: DateTime
	userLaMu: String
	language: String
	category: String
	helpInfo: String
	code: String
	responsibilityScope: String
	responsibilityTask: String
	responsibilitySupportTask: String
	responsibilityFeedback: String
	transactionTypes: [TransactionType]
}

type TransactionType implements ElementType {
	id: ID!
	metaType: ElementMetaType!
	propertyValue(propertyName: String!): String
	description: String
	startDate: DateTime
	endDate: DateTime
	state: String
	dateLaMu: DateTime
	userLaMu: String
	language: String
	category: String
	helpInfo: String
	code: String
	result: String
	initiator: RoleType
	executor: RoleType
	appendixTypes: [AppendixType]
	messageInTransactionTypes: [MessageInTransactionType]
}

type Framework {
	file: String!
	elementTypes(metaType: String): [ElementType]
	appendixTypes: [AppendixType]
	complexElementTypes: [ComplexElementType]
	groupTypes: [GroupType]
	messageInTransactionTypes: [MessageInTransactionType]
	messageInTransactionTypeConditions: [MessageInTransactionTypeCondition]
	messageTypes: [MessageType]
	organisationTypes: [OrganisationType]
	personTypes: [PersonType]
	projectTypes: [ProjectType]
	roleTypes: [RoleType]
	simpleElementTypes: [SimpleElementType]
	transactionPhaseTypes: [TransactionPhaseType]
	transactionTypes: [TransactionType]
}

type Query {
	frameworkFiles: [String]
	loadFrameworkFile(file: String!): Framework
	elementMetaTypes: [ElementMetaType]
}

schema {
  query: Query
}
